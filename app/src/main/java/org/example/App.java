/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.example;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;

import org.example.packets.PacketReader;
import org.example.primitives.LongField;
import org.example.primitives.VarIntField;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {

        int portNumber = args.length <= 1 ? 25565 : Integer.parseInt(args[0]);

        ServerSocket serverSocket = null;

        try {
            serverSocket = new ServerSocket(portNumber);

            while(true){
                Socket clientSocket = serverSocket.accept();

                new Thread(()->{
                    try{


                        System.out.println("Client " + clientSocket.getRemoteSocketAddress() + " has connected.");

                        while(!clientSocket.isClosed()){
                            InputStream is = clientSocket.getInputStream();
                            OutputStream os = clientSocket.getOutputStream();

                            PacketReader.readPacket(is, os);
                            
                            VarIntField length = new VarIntField(is);
                            VarIntField packetID = new VarIntField(is);

                            if(packetID.getValue() == 1){

                                LongField payload = new LongField(is);

                                byte[] bytes = new byte[2];

                                bytes[0] = (byte)(length.getValue().intValue());
                                bytes[1] = 1;

                                os.write(bytes);

                                os.write(payload.getBytes());

                            }

                        }
                    }
                    catch(Exception e){
                        e.printStackTrace();
                    }
                    finally{
                        if(!clientSocket.isClosed()){
                            try {
                                clientSocket.close();
                            } catch (IOException e) {
                                // TODO Auto-generated catch block
                                e.printStackTrace();
                            }
                        }
                    }
                }).start();

            }

        } catch (IOException e) {
            e.printStackTrace();
        }
        finally{
            try {
                if(serverSocket != null && !serverSocket.isClosed())
                    serverSocket.close();
            } catch (IOException e) {e.printStackTrace();}
        }

    }
}
